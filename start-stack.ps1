<#
 start-stack.ps1  (FULL-FLEDGED DEV ORCHESTRATOR)
 Purpose: Spin up the entire developer stack with optional components, health checks,
          environment scaffolding, and quality gates.

 QUICK USE:
   Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass; ./start-stack.ps1

 ADVANCED FLAGS:
   -SkipChain       Skip Hardhat local blockchain
   -SkipWeb         Skip frontend web (Vite)
   -SkipMobile      Skip mobile Expo app
   -SkipInstall     Do not run npm install
   -NoDevAuth       Do NOT set AUTH_DEV_MODE=1 (keep real auth)
   -NoMock          Do NOT set MOCK_MODE=1 (allow real services if configured)
   -RunSmoke        After backend boot, run a health + sample API smoke test
   -OpenBrowser     Open default browser to the web app once ready
   -UseConcurrently Use legacy single-window concurrently launcher (disables health orchestration)

 WHAT IT DOES:
   1. Pre-flight environment + optional .env generation for backend
   2. (Optional) dependency install for all workspaces
   3. Contract compile (if chain enabled) to refresh ABI
   4. Launch backend first, wait for /healthz
   5. Run smoke tests (optional)
   6. Launch remaining components (chain, web, mobile) each in its own PowerShell
   7. Optionally open browser
   8. Provide stop instructions & process summary

 NOTES:
   - Uses mock + dev auth by default for zero-friction local start.
   - For real integrations, pass -NoMock and -NoDevAuth and configure backend/.env.
#>
param(
  [switch]$SkipChain,
  [switch]$SkipWeb,
  [switch]$SkipMobile,
  [switch]$SkipInstall,
  [switch]$NoDevAuth,
  [switch]$NoMock,
  [switch]$RunSmoke,
  [switch]$OpenBrowser,
  [switch]$UseConcurrently
)

$ErrorActionPreference = 'Stop'
function Write-Section($t){Write-Host "`n==== $t ====\n" -ForegroundColor Cyan}
function Write-Info($m){Write-Host "[INFO] $m" -ForegroundColor Gray}
function Write-Ok($m){Write-Host "[OK]   $m" -ForegroundColor Green}
function Write-Warn($m){Write-Warning $m}
function Write-Err($m){Write-Host "[ERR]  $m" -ForegroundColor Red}

# 0. Node version
Write-Section "Pre-flight"
try { $nodeVer = (node -v) } catch { Write-Warn "Node not found in PATH (continuing may fail)" }
if ($nodeVer) { Write-Info "Node version: $nodeVer" }

# 1. Environment variables (inherit for child processes)
if (-not $NoDevAuth) { $env:AUTH_DEV_MODE = '1' } else { $env:AUTH_DEV_MODE = $env:AUTH_DEV_MODE }
if (-not $NoMock) { $env:MOCK_MODE = '1' } else { $env:MOCK_MODE = $env:MOCK_MODE }
if (-not $env:PORT) { $env:PORT = '4000' }
if (-not $env:CORS_ORIGINS) { $env:CORS_ORIGINS = 'http://localhost:5173' }
if (-not $env:JWT_SECRET) { $env:JWT_SECRET = 'dev_local_secret_change_me' }

Write-Section "Environment"
Write-Host "AUTH_DEV_MODE=$($env:AUTH_DEV_MODE)"; Write-Host "MOCK_MODE=$($env:MOCK_MODE)"; Write-Host "PORT(base)=$($env:PORT)"; Write-Host "CORS=$($env:CORS_ORIGINS)"

# 2. Ensure backend .env.development.local exists (non-destructive)
$backendEnvPath = Join-Path -Path (Resolve-Path .) -ChildPath 'backend/.env.development.local'
if (-not (Test-Path $backendEnvPath)) {
  Write-Section "Scaffolding backend env file"
  @(
    '# Auto-generated by start-stack.ps1',
    "PORT=$($env:PORT)",
    'MONGODB_URI=mongodb://localhost:27017/herbs',
    "JWT_SECRET=$($env:JWT_SECRET)",
    'PINATA_API_KEY=YOUR_KEY_HERE',
    'PINATA_SECRET_API_KEY=YOUR_SECRET_HERE',
    'HERB_REGISTRY_ADDRESS=',
    'PRIVATE_KEY='
  ) | Set-Content -Encoding UTF8 $backendEnvPath
  Write-Ok "Created backend/.env.development.local"
} else {
  Write-Info "Backend env file exists (leaving untouched)"
}

# 3. Dependency install (root workspaces)
if (-not $SkipInstall) {
  Write-Section "Dependencies"
  if (-not (Test-Path package-lock.json)) { Write-Info "First-time install (workspace)" } else { Write-Info "Verifying modules" }
  npm install --no-audit --no-fund | Out-Host
  Write-Ok "Dependencies ready"
} else { Write-Info "Skipping install (flag)" }

# 4. Optional compile contracts
if (-not $SkipChain) {
  Write-Section "Compile Contracts"
  try { npm run compile -w blockchain | Out-Host; Write-Ok "Contracts compiled + ABI copied" } catch { Write-Warn "Compile failed: $($_.Exception.Message) (continuing)" }
}

if ($UseConcurrently) {
  Write-Section "Legacy Concurrent Mode"
  $cmds = @()
  $names = @()
  if (-not $SkipChain) { $cmds += 'npm run node -w blockchain'; $names += 'chain' }
  $cmds += 'npm run dev -w backend'; $names += 'backend'
  if (-not $SkipWeb) { $cmds += 'npm run dev -w frontend-web'; $names += 'web' }
  if (-not $SkipMobile) { $cmds += 'npm start -w mobile-app'; $names += 'mobile' }
  if ($cmds.Count -eq 0) { Write-Err "Nothing to run"; exit 1 }
  $colors = @('magenta','green','cyan','yellow')
  $colorSubset = $colors[0..($names.Count-1)] -join ','
  $full = 'npx concurrently -c ' + $colorSubset + ' -n ' + ($names -join ',') + ' ' + ($cmds | ForEach-Object { '"' + $_ + '"' }) -join ' '
  Write-Host $full -ForegroundColor Yellow
  Invoke-Expression $full
  Write-Host "`nAll processes terminated." -ForegroundColor Cyan
  exit 0
}

# 5. Advanced orchestrated mode (individual windows / processes)
Write-Section "Launch Backend (priority)"
function Start-Comp {
  param([string]$Name,[string]$Cmd)
  $psArgs = "-NoExit -Command `$env:FORCE_COLOR=1; $Cmd"
  $proc = Start-Process -FilePath "powershell" -ArgumentList $psArgs -PassThru -WindowStyle Normal
  return $proc
}

$backendProc = Start-Comp -Name 'backend' -Cmd 'npm run dev -w backend'
Write-Info "Backend PID: $($backendProc.Id) (waiting for /healthz)"

function Wait-Health($url, $timeoutSec){
  $stopAt = (Get-Date).AddSeconds($timeoutSec)
  while((Get-Date) -lt $stopAt){
    try { $r = Invoke-WebRequest -UseBasicParsing -Uri $url -TimeoutSec 3; if ($r.StatusCode -eq 200){ return $true } } catch { }
    Start-Sleep -Milliseconds 700
  }
  return $false
}

$basePort = [int]$env:PORT
$healthy = Wait-Health "http://localhost:$basePort/healthz" 40
if ($healthy){ Write-Ok "Backend healthy at http://localhost:$basePort" } else { Write-Warn "Backend health not confirmed (continuing)" }

if ($RunSmoke){
  Write-Section "Smoke Test"
  try {
    $trace = Invoke-WebRequest -UseBasicParsing -Uri "http://localhost:$basePort/api/herbs" -TimeoutSec 5
    if ($trace.StatusCode -eq 200){ Write-Ok "GET /api/herbs responded 200" }
  } catch { Write-Warn "Smoke test failed: $($_.Exception.Message)" }
}

$procs = @()
if (-not $SkipChain){
  Write-Section "Launch Chain"
  $chainProc = Start-Comp -Name 'chain' -Cmd 'npm run node -w blockchain'
  $procs += $chainProc
  Write-Info "Chain PID: $($chainProc.Id)"
}
if (-not $SkipWeb){
  Write-Section "Launch Web"
  $webProc = Start-Comp -Name 'web' -Cmd 'npm run dev -w frontend-web'
  $procs += $webProc
  Write-Info "Web PID: $($webProc.Id) (http://localhost:5173)"
}
if (-not $SkipMobile){
  Write-Section "Launch Mobile (Expo)"
  # Clean potential UTF-8 BOM in mobile-app/package.json (if editor inserted it)
  $mobilePkg = Join-Path (Resolve-Path .) 'mobile-app/package.json'
  if (Test-Path $mobilePkg) {
    $raw = Get-Content -Path $mobilePkg -Raw -Encoding Byte
    $hadBom = $false
    if ($raw.Length -ge 3 -and $raw[0] -eq 0xEF -and $raw[1] -eq 0xBB -and $raw[2] -eq 0xBF) { $hadBom = $true }
    $text = if ($hadBom) { [System.Text.Encoding]::UTF8.GetString($raw,3,$raw.Length-3) } else { [System.Text.Encoding]::UTF8.GetString($raw) }
    # Remove any stray ZERO WIDTH NO-BREAK SPACE (U+FEFF) chars inside the file
    $clean = ($text -replace [char]0xFEFF, '')
    if ($hadBom) { Write-Info 'Removing UTF-8 BOM from mobile-app/package.json' }
    # Also ensure first char is '{' (trim leading whitespace lines)
    $clean = $clean.TrimStart()
    # Rewrite using BOM-less UTF8
    $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
    [System.IO.File]::WriteAllText($mobilePkg, $clean, $utf8NoBom)
    # Verify
    $after = Get-Content -Path $mobilePkg -Raw -Encoding Byte
    if ($after.Length -ge 3 -and $after[0] -eq 0xEF -and $after[1] -eq 0xBB -and $after[2] -eq 0xBF) {
      Write-Warn 'BOM still present after attempted removal (will try ASCII rewrite fallback)'
      $ascii = [System.Text.Encoding]::ASCII.GetBytes($clean)
      [System.IO.File]::WriteAllBytes($mobilePkg, $ascii)
      $after2 = Get-Content -Path $mobilePkg -Raw -Encoding Byte
      if ($after2.Length -ge 3 -and $after2[0] -eq 0xEF -and $after2[1] -eq 0xBB -and $after2[2] -eq 0xBF) {
        Write-Warn 'Fallback rewrite still shows BOM; manual edit may be required.'
      } else { Write-Ok 'BOM removed via ASCII fallback' }
    } elseif ($hadBom) {
      Write-Ok 'BOM removed successfully'
    }
  }
  $mobProc = Start-Comp -Name 'mobile' -Cmd 'npm start -w mobile-app'
  $procs += $mobProc
  Write-Info "Mobile PID: $($mobProc.Id)"
}

if ($OpenBrowser -and -not $SkipWeb){
  Start-Process "http://localhost:5173"
  Write-Info "Browser opening..."
}

Write-Section "Summary"
Write-Host ("Backend PID: {0}" -f $backendProc.Id)
foreach($p in $procs){
  $role = 'Proc'
  $procArgs = $p.StartInfo.Arguments
  if ($procArgs -match 'blockchain') { $role = 'Chain' }
  elseif ($procArgs -match 'frontend-web') { $role = 'Web' }
  elseif ($procArgs -match 'mobile-app') { $role = 'Mobile' }
  Write-Host ("{0} PID: {1}" -f $role, $p.Id)
}
Write-Host "\nTo stop everything: Stop-Process -Id <PID1>,<PID2>,...  (or close windows)" -ForegroundColor Yellow
Write-Host "Dev Auth: AUTH_DEV_MODE=$($env:AUTH_DEV_MODE)  Mock: MOCK_MODE=$($env:MOCK_MODE)" -ForegroundColor Gray
Write-Host "Metrics: http://localhost:$basePort/metrics" -ForegroundColor Gray
Write-Host "Trace sample (after creating data): http://localhost:$basePort/api/herbs/BATCH_ID/trace" -ForegroundColor Gray

Write-Host "\nOrchestrator finished launching processes. Windows remain open independently." -ForegroundColor Cyan
