openapi: 3.1.0
info:
  title: Ayurvedic Herb Traceability API
  version: 1.0.0
  description: REST API for managing, tracing, and verifying Ayurvedic herb batches.

servers:
  - url: http://localhost:4000/api

paths:
  /herbs:
    get:
      summary: List all herbs
      description: Paginated list. Query params: page (>=1), limit (1-100). Returns { data: { items: [...], page, limit, total, pages, hasNext, hasPrev } }
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
          description: Page number (1-based)
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
          description: Page size
      responses:
        "200":
          description: Paginated herb list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedHerbListResponse"
  "500": { $ref: "#/components/responses/Error500" }
    post:
      summary: Create herb batch (JSON only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HerbCreate"
      responses:
        "201":
          description: Herb created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HerbResponse"
  "400": { $ref: "#/components/responses/Error400" }
  "500": { $ref: "#/components/responses/Error500" }

  /herbs/create:
    post:
      summary: Deprecated legacy create route (use POST /herbs)
      deprecated: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HerbCreate"
      responses:
        "201":
          description: Herb created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HerbResponse"
          headers:
  "400": { $ref: "#/components/responses/Error400" }
  "500": { $ref: "#/components/responses/Error500" }
            Deprecation:
              description: Indicates this route is deprecated
              schema: { type: string }
            Warning:
              description: Migration warning with successor path
              schema: { type: string }
            Link:
              description: Successor version link
              schema: { type: string }

  /herbs/upload:
    post:
      summary: Create herb batch with media (multipart)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: { type: string }
                batchId: { type: string }
                lat: { type: number, format: float, minimum: -90, maximum: 90 }
                lng: { type: number, format: float, minimum: -180, maximum: 180 }
                harvestedAt: { type: string, format: date-time }
                photo:
                  type: string
                  format: binary
      responses:
        "201":
          description: Herb created with optional IPFS + AI validation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HerbResponse"
  "400": { $ref: "#/components/responses/Error400" }
  "500": { $ref: "#/components/responses/Error500" }

  /herbs/validate-image:
    post:
      summary: Validate herb image with AI
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                batchId: { type: string }
                photo:
                  type: string
                  format: binary
      responses:
        "200":
          description: Validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIValidationResponse"
        "400":
          description: Missing or invalid photo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500": { $ref: "#/components/responses/Error500" }

  /herbs/{batchId}/process:
    post:
      summary: Add processing event
      parameters:
        - name: batchId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessEventInput"
      responses:
        "200":
          description: Updated herb with events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HerbResponse"
  "400": { $ref: "#/components/responses/Error400" }
  "404": { $ref: "#/components/responses/Error404" }
  "500": { $ref: "#/components/responses/Error500" }

  /herbs/{batchId}/events:
    post:
      summary: Deprecated legacy processing event route (use /herbs/{batchId}/process)
      deprecated: true
      parameters:
        - name: batchId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessEventInput"
      responses:
        "200":
          description: Updated herb with events
          headers:
            Deprecation:
              description: Indicates this route is deprecated
              schema: { type: string }
            Warning:
              description: Migration warning with successor path
              schema: { type: string }
            Link:
              description: Successor version link
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HerbResponse"
  "400": { $ref: "#/components/responses/Error400" }
  "404": { $ref: "#/components/responses/Error404" }
  "500": { $ref: "#/components/responses/Error500" }

  /herbs/{batchId}/trace:
    get:
      summary: Get full public trace of a herb batch
      parameters:
        - name: batchId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Trace info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TraceResponse"
  "404": { $ref: "#/components/responses/Error404" }
  "500": { $ref: "#/components/responses/Error500" }

  /herbs/{batchId}/qrcode:
    get:
      summary: Generate QR code (SVG) for trace URL
      parameters:
        - name: batchId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: QR code SVG
          content:
            image/svg+xml: {}
  "404": { $ref: "#/components/responses/Error404" }
  "500": { $ref: "#/components/responses/Error500" }

  /herbs/{batchId}/transfer:
    post:
      summary: Transfer ownership of herb batch
      parameters:
        - name: batchId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ newOwner ]
              properties:
                newOwner: { type: string, description: Blockchain address }
      responses:
        "200":
          description: Ownership transferred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HerbResponse"
  "400": { $ref: "#/components/responses/Error400" }
  "404": { $ref: "#/components/responses/Error404" }
  "500": { $ref: "#/components/responses/Error500" }

  /metrics:
    get:
      summary: Metrics (Prometheus format - placeholder)
      responses:
        "200":
          description: Plain text metrics
          content:
            text/plain: {}

components:
  schemas:
    ResponseWrapper:
      type: object
      properties:
        data: {}

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }

    Herb:
      type: object
      properties:
        batchId: { type: string }
        name: { type: string }
        farmerName: { type: string }
        geo:
          type: object
          properties:
            type: { type: string, enum: [Point] }
            coordinates:
              type: array
              items: { type: number }
              minItems: 2
              maxItems: 2
        metadataURI: { type: string }
        ipfsHash: { type: string }
        photoIpfsCid: { type: string }
        processingEvents:
          type: array
          items: { $ref: "#/components/schemas/ProcessEvent" }
        ownershipTransfers:
          type: array
          items: { $ref: "#/components/schemas/OwnershipTransfer" }
        aiValidation: { $ref: "#/components/schemas/AIValidation" }
        chain: { type: object }
        createdAt: { type: string, format: date-time }

    HerbCreate:
      type: object
      required: [ name, batchId ]
      properties:
        name: { type: string }
        batchId: { type: string }
        farmerName: { type: string }
        harvestedAt: { type: string, format: date-time }

    ProcessEvent:
      type: object
      properties:
        actor: { type: string }
        data: { type: string }
        timestamp: { type: string, format: date-time }

    ProcessEventInput:
      type: object
      required: [ actor, data ]
      properties:
        actor: { type: string }
        data: { type: string }

    OwnershipTransfer:
      type: object
      properties:
  to: { type: string, pattern: "^0x[a-fA-F0-9]{3,}$" }
        timestamp: { type: string, format: date-time }

    AIValidation:
      type: object
      properties:
        predictedName: { type: string }
        confidence: { type: number }
        model: { type: string }
        validatedAt: { type: string, format: date-time }

    Trace:
      type: object
      properties:
        batchId: { type: string }
        farmerName: { type: string }
        createdAt: { type: string, format: date-time }
        geo: { $ref: "#/components/schemas/Herb/properties/geo" }
        processingEvents:
          type: array
          items: { $ref: "#/components/schemas/ProcessEvent" }
        ownershipTransfers:
          type: array
          items: { $ref: "#/components/schemas/OwnershipTransfer" }
        photoIpfsCid: { type: string }
        chain: { type: object }
        traceUrl: { type: string }
        qr: { type: string }
    HerbResponse:
      allOf:
        - $ref: "#/components/schemas/ResponseWrapper"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Herb"
    HerbListResponse:
      allOf:
        - $ref: "#/components/schemas/ResponseWrapper"
        - type: object
          properties:
            data:
              type: array
              items: { $ref: "#/components/schemas/Herb" }
    PaginatedHerbListResponse:
      allOf:
        - $ref: "#/components/schemas/ResponseWrapper"
        - type: object
          properties:
            data:
              type: object
              properties:
                items:
                  type: array
                  items: { $ref: "#/components/schemas/Herb" }
                page: { type: integer }
                limit: { type: integer }
                total: { type: integer }
                pages: { type: integer }
                hasNext: { type: boolean }
                hasPrev: { type: boolean }
    TraceResponse:
      allOf:
        - $ref: "#/components/schemas/ResponseWrapper"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Trace"
    AIValidationResponse:
      allOf:
        - $ref: "#/components/schemas/ResponseWrapper"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/AIValidation"
  responses:
    Error400:
      description: Bad request / validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error404:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
